// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, role)
VALUES ($1, $2, $3)
RETURNING id, username, role, created_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Role         string
}

type CreateUserRow struct {
	ID        pgtype.UUID
	Username  string
	Role      string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PasswordHash, arg.Role)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, role, refresh_token
FROM users
WHERE id = $1
`

type GetRefreshTokenRow struct {
	ID           pgtype.UUID
	Role         string
	RefreshToken string
}

func (q *Queries) GetRefreshToken(ctx context.Context, id pgtype.UUID) (GetRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, id)
	var i GetRefreshTokenRow
	err := row.Scan(&i.ID, &i.Role, &i.RefreshToken)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, role, created_at
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID           pgtype.UUID
	Username     string
	PasswordHash string
	Role         string
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, role
FROM users
WHERE id = $1
`

type GetUserRoleRow struct {
	ID   pgtype.UUID
	Role string
}

func (q *Queries) GetUserRole(ctx context.Context, id pgtype.UUID) (GetUserRoleRow, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i GetUserRoleRow
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}

const setRefreshToken = `-- name: SetRefreshToken :one
UPDATE users
SET refresh_token = $1
WHERE id = $2
RETURNING id
`

type SetRefreshTokenParams struct {
	RefreshToken string
	ID           pgtype.UUID
}

func (q *Queries) SetRefreshToken(ctx context.Context, arg SetRefreshTokenParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, setRefreshToken, arg.RefreshToken, arg.ID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
