// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewTransaction = `-- name: CreateNewTransaction :one
INSERT INTO transactions (user_id, item_id, type, amount, status, reason)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at
`

type CreateNewTransactionParams struct {
	UserID pgtype.UUID
	ItemID pgtype.UUID
	Type   string
	Amount int32
	Status string
	Reason *string
}

type CreateNewTransactionRow struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateNewTransaction(ctx context.Context, arg CreateNewTransactionParams) (CreateNewTransactionRow, error) {
	row := q.db.QueryRow(ctx, createNewTransaction,
		arg.UserID,
		arg.ItemID,
		arg.Type,
		arg.Amount,
		arg.Status,
		arg.Reason,
	)
	var i CreateNewTransactionRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getTransactionsForItem = `-- name: GetTransactionsForItem :many
SELECT id, user_id, item_id, type, amount, status, reason, created_at
FROM transactions
WHERE item_id = $1
LIMIT $2 OFFSET $3
`

type GetTransactionsForItemParams struct {
	ItemID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetTransactionsForItem(ctx context.Context, arg GetTransactionsForItemParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsForItem, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.Type,
			&i.Amount,
			&i.Status,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
