// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (name)
VALUES ($1)
RETURNING uuid, name, created_at
`

type CreateItemRow struct {
	Uuid      pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateItem(ctx context.Context, name string) (CreateItemRow, error) {
	row := q.db.QueryRow(ctx, createItem, name)
	var i CreateItemRow
	err := row.Scan(&i.Uuid, &i.Name, &i.CreatedAt)
	return i, err
}

const getNItemsOffset = `-- name: GetNItemsOffset :many
SELECT id, uuid, name, created_at, updated_at, quantity
FROM items
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetNItemsOffsetParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetNItemsOffset(ctx context.Context, arg GetNItemsOffsetParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, getNItemsOffset, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restockItem = `-- name: RestockItem :one
UPDATE items
SET quantity = quantity + $1, updated_at = now()
WHERE uuid = $2
RETURNING uuid, name, quantity, updated_at
`

type RestockItemParams struct {
	Quantity int32
	Uuid     pgtype.UUID
}

type RestockItemRow struct {
	Uuid      pgtype.UUID
	Name      string
	Quantity  int32
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) RestockItem(ctx context.Context, arg RestockItemParams) (RestockItemRow, error) {
	row := q.db.QueryRow(ctx, restockItem, arg.Quantity, arg.Uuid)
	var i RestockItemRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Quantity,
		&i.UpdatedAt,
	)
	return i, err
}

const setItemQuantity = `-- name: SetItemQuantity :one
UPDATE items
SET quantity = $1, updated_at = now()
WHERE uuid = $2
RETURNING uuid, name, quantity, updated_at
`

type SetItemQuantityParams struct {
	Quantity int32
	Uuid     pgtype.UUID
}

type SetItemQuantityRow struct {
	Uuid      pgtype.UUID
	Name      string
	Quantity  int32
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) SetItemQuantity(ctx context.Context, arg SetItemQuantityParams) (SetItemQuantityRow, error) {
	row := q.db.QueryRow(ctx, setItemQuantity, arg.Quantity, arg.Uuid)
	var i SetItemQuantityRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Quantity,
		&i.UpdatedAt,
	)
	return i, err
}
